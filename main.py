from aiogram import Bot, Dispatcher, types, executor
import logging

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from dotenv import load_dotenv, find_dotenv

import utils
import os
from models import Team, User

storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)

load_dotenv(find_dotenv())
bot = Bot(token='5300873799:AAHI2Tel_yCprOkXnEJm2LlGoQE9gl1LsAo')
dp = Dispatcher(bot, storage=storage)


class Info(StatesGroup):
    name = State()
    selection = State()
    text = State()
    team_create = State()
    team_search = State()


@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['args'] = message.get_args()
    user_id = str(message.from_id)
    users = [user.telegram_id for user in User.select()]
    if user_id not in users:
        await Info.name.set()

        await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫, —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –Ω–∞–º —Ç–µ–±—è –≤–µ–ª–∏—á–∞—Ç—å?')
    else:
        await Info.text.set()
        await message.answer(text='–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é?',
                             reply_markup=utils.create_markup('–°–æ–∑–¥–∞—Ç—å', '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'))


@dp.message_handler(state=Info.name)
async def process_name(message: types.Message):
    await Info.text.set()
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.text} '
                         f'–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é?',
                         reply_markup=utils.create_markup('–°–æ–∑–¥–∞—Ç—å', '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'))

    utils.create_player(message.text, message.from_id)


@dp.message_handler(text="–°–æ–∑–¥–∞—Ç—å", state=Info.text)
async def without_puree(message: types.Message):
    await Info.team_create.set()

    await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ', reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(lambda message: message.text == "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", state=Info.text)
async def without_puree(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        if data['args'] is not None:
            await message.answer('–£ —Ç–µ–±—è –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞, —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ø–æ –Ω–µ–π?',
                                 reply_markup=utils.create_markup('–ü–æ —Å—Å—ã–ª–∫–µ', '–í–≤–µ—Å—Ç–∏ —Å–∞–º–æ–º—É'))
            await Info.team_search.set()


@dp.message_handler(state=Info.team_create)
async def team_create(message: types.Message):
    team = utils.create_team(message.text)
    user = User.get(User.telegram_id == str(message.from_id))
    utils.add_player(user.telegram_id, team.title)
    await message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –∫–æ–º–∞–Ω–¥–∞ {message.text} —Å–æ–∑–¥–∞–Ω–∞\n'
                         f'–≤—ã - –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã\n'
                         f'—á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º —Å—Å—ã–ª–∫—É https://t.me/Aloxa_Antoxa_bot?start={team.ref_number}')


@dp.message_handler(lambda message: message.text == "–ü–æ —Å—Å—ã–ª–∫–µ", state=Info.team_search)
async def foo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        team = Team.get(Team.ref_number == str(data['args']))
        user = User.get(User.telegram_id == str(message.from_id))
        utils.add_player(user.telegram_id, team.title)
        await message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ {team.title}', reply_markup=types.ReplyKeyboardRemove() )


@dp.message_handler(lambda message: message.text == "–í–≤–µ—Å—Ç–∏ —Å–∞–º–æ–º—É", state=Info.team_search)
async def team_search():
    await Info.text.set()


@dp.message_handler(state=Info.text)
async def bar(message: types.Message):
    teams = [team.title for team in Team.select()]
    if message.text in teams:
        team = Team.get(Team.title == message.text)
        user = User.get(User.telegram_id == str(message.from_id))
        utils.add_player(user.telegram_id, team.title)
        await message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ {team.title}')
    else:
        await message.answer('–£–≤—ã, –Ω–æ —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç')


@dp.message_handler(commands=["dice"])
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")


executor.start_polling(dp)
